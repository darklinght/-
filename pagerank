# -*- coding: utf-8 -*-
import networkx as nx
import matplotlib.pyplot as plt

damping_factor = 0.85  # 阻尼系数,即α
min_delta = 0.00001  # 确定迭代是否结束的参数,即ϵ

def page_rank(graph):
    nodes = graph.nodes()
    graph_size = len(nodes)

    if graph_size == 0:
        return {}
    page_rank = dict.fromkeys(nodes, 1.0 / graph_size)  # 给每个节点赋予初始的PR值
    damping_value = (1.0 - damping_factor) / graph_size  # 公式中的(1−α)/N部分

    i = 0
    while True:
        i += 1
        change = 0
        for node in nodes:
            rank = 0
            for incident_page in graph.in_edges(node):  # 遍历所有“入射”的页面
                rank += damping_factor * (page_rank[incident_page[0]] / len(list(graph.neighbors(node))))
            rank += damping_value
            change += abs(page_rank[node] - rank)  # 绝对值
            page_rank[node] = rank

        print("%s-th iter" % (i + 1))
        print(page_rank)

        if change < min_delta:
            break
    print("iter finished!")
    return page_rank


if __name__ == '__main__':
    #构建有向图
    dg = nx.DiGraph()

    dg.add_nodes_from(["A", "B", "C", "D", "E"])

    dg.add_edge("A", "B")
    dg.add_edge("A", "C")
    dg.add_edge("A", "D")
    dg.add_edge("B", "D")
    dg.add_edge("C", "E")
    dg.add_edge("D", "E")
    dg.add_edge("B", "E")
    dg.add_edge("E", "A")

    page_ranks = page_rank(dg)
    print("The page rank is\n", page_ranks)

    pos = nx.spring_layout(dg)  # 可视化图
    nx.draw(dg, pos, with_labels=True, node_size=700, node_color="skyblue", font_size=10, font_color="black",
            font_weight="bold", arrowsize=20)
    plt.show()
